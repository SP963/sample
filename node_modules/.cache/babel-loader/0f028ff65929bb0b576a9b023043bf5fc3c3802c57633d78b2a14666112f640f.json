{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\TodoApp\\\\client\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Typography, Card, CardContent, CardActions, Checkbox, FormControlLabel } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [open, setOpen] = useState(false); // State for dialog visibility\n  const [editMode, setEditMode] = useState(false); // Flag to check if it's an edit mode\n  const [isDeadlineChanged, setIsDeadlineChanged] = useState(false);\n  const [currentTask, setCurrentTask] = useState({\n    _id: '',\n    title: '',\n    description: '',\n    deadline: '',\n    completed: false\n  });\n\n  // Validation errors\n  const [errors, setErrors] = useState({\n    title: '',\n    description: '',\n    deadline: ''\n  });\n\n  // State for delete confirmation dialog\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [taskToDelete, setTaskToDelete] = useState(null);\n\n  // Fetch tasks on component mount\n  useEffect(() => {\n    axios.get(`${process.env.REACT_APP_API_URL}/tasks`).then(response => {\n      // Sort tasks by deadline in ascending order (earliest first)\n      const sortedTasks = response.data.sort((a, b) => {\n        const deadlineA = new Date(a.deadline);\n        const deadlineB = new Date(b.deadline);\n        return deadlineA - deadlineB; // Sort by ascending deadline\n      });\n      setTasks(sortedTasks); // Store sorted tasks in the state\n    }).catch(error => {\n      console.error('Error fetching tasks:', error);\n    });\n  }, []);\n\n  // Handle form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // If the deadline field is being edited, set isDeadlineChanged to true\n    if (name === 'deadline') {\n      setIsDeadlineChanged(true);\n    }\n    setCurrentTask({\n      ...currentTask,\n      [name]: value\n    });\n  };\n\n  // Handle Completed checkbox change (Only in Edit mode)\n  const handleCompletedChange = e => {\n    setCurrentTask({\n      ...currentTask,\n      completed: e.target.checked\n    });\n  };\n\n  // Validate the title, description, and deadline\n  const validateFields = () => {\n    const {\n      title,\n      description,\n      deadline\n    } = currentTask;\n    let formValid = true;\n    const newErrors = {\n      title: '',\n      description: '',\n      deadline: ''\n    };\n\n    // Title validation\n    if (!title) {\n      newErrors.title = 'Title is required';\n      formValid = false;\n    } else if (title.length < 5) {\n      newErrors.title = 'Title must be at least 5 characters';\n      formValid = false;\n    } else if (title.length > 25) {\n      newErrors.title = 'Title must not exceed 25 characters';\n      formValid = false;\n    } else if (title.trim() !== title) {\n      newErrors.title = 'Title must not start or end with spaces';\n      formValid = false;\n    }\n\n    // Deadline validation (should be in the future)\n    if (!deadline) {\n      newErrors.deadline = 'Deadline is required';\n      formValid = false;\n    } else {\n      const currentDate = new Date();\n      const deadlineDate = new Date(deadline);\n      if (deadlineDate <= currentDate) {\n        newErrors.deadline = 'Deadline must be in the future';\n        formValid = false;\n      }\n    }\n    setErrors(newErrors);\n    return formValid;\n  };\n\n  // Handle opening the dialog for adding a new task\n  const handleOpenDialog = () => {\n    setOpen(true);\n    setEditMode(false); // Open in add mode\n    setCurrentTask({\n      _id: '',\n      title: '',\n      description: '',\n      deadline: '',\n      completed: false\n    });\n    setErrors({\n      title: '',\n      description: '',\n      deadline: ''\n    }); // Reset errors\n  };\n\n  // Handle opening the dialog for editing a task\n  const handleOpenEditDialog = task => {\n    setOpen(true);\n    setEditMode(true); // Open in edit mode\n\n    // Format the deadline for 'datetime-local' input (YYYY-MM-DDTHH:mm)\n    const formattedDeadline = task.deadline ? moment(task.deadline).format('YYYY-MM-DDTHH:mm') // Format to match 'datetime-local' format\n    : '';\n    setCurrentTask({\n      _id: task._id,\n      title: task.title,\n      description: task.description,\n      deadline: formattedDeadline,\n      // Set the formatted date for the 'datetime-local' input\n      completed: task.completed\n    });\n    setErrors({\n      title: '',\n      description: '',\n      deadline: ''\n    }); // Reset errors\n  };\n  const formatDate = dateString => {\n    return moment(dateString).format('MM/DD/YYYY HH:mm'); // Custom format\n  };\n\n  // Handle closing the dialog\n  const handleCloseDialog = () => {\n    setOpen(false);\n    setErrors({\n      title: '',\n      description: '',\n      deadline: ''\n    }); // Reset errors\n  };\n\n  // Handle adding or editing a task\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Only validate if the deadline has been changed\n    if (isDeadlineChanged) {\n      const currentDate = new Date();\n      const taskDeadline = new Date(currentTask.deadline);\n\n      // If the deadline is in the past, show an error\n      if (taskDeadline < currentDate) {\n        setErrors({\n          ...errors,\n          deadline: 'Deadline must be in the future'\n        });\n        return; // Prevent form submission if the deadline is in the past\n      }\n    }\n\n    // Proceed with saving the task\n    if (validateFields()) {\n      const taskData = {\n        title: currentTask.title,\n        description: currentTask.description,\n        deadline: currentTask.deadline,\n        completed: currentTask.completed // Ensure the completed status is included\n      };\n      if (editMode) {\n        // Update task\n        axios.put(`${process.env.REACT_APP_API_URL}/tasks/${currentTask._id}`, taskData).then(response => {\n          setTasks(tasks.map(task => task._id === currentTask._id ? {\n            ...task,\n            ...response.data\n          } : task));\n          handleCloseDialog();\n        }).catch(error => {\n          console.error('Error editing task:', error);\n          alert('Failed to edit task');\n        });\n      } else {\n        // Add new task\n        axios.post(`${process.env.REACT_APP_API_URL}/tasks`, taskData).then(response => {\n          setTasks([...tasks, response.data]);\n          handleCloseDialog();\n        }).catch(error => {\n          console.error('Error adding task:', error);\n          alert('Failed to add task');\n        });\n      }\n    }\n  };\n\n  // Handle task deletion\n  const handleDelete = taskId => {\n    axios.delete(`${process.env.REACT_APP_API_URL}/tasks/${taskId}`).then(() => {\n      setTasks(tasks.filter(task => task._id !== taskId));\n      setDeleteDialogOpen(false); // Close the delete confirmation dialog\n    }).catch(error => {\n      console.error('Error deleting task:', error);\n      alert('Failed to delete task');\n      setDeleteDialogOpen(false); // Close the dialog in case of error\n    });\n  };\n\n  // Open delete confirmation dialog\n  const openDeleteDialog = task => {\n    setTaskToDelete(task);\n    setDeleteDialogOpen(true);\n  };\n\n  // Close delete confirmation dialog\n  const closeDeleteDialog = () => {\n    setDeleteDialogOpen(false);\n    setTaskToDelete(null); // Reset task to delete\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOpenDialog,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '20px',\n        marginTop: '20px'\n      },\n      children: tasks.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No tasks available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this) : tasks.map(task => /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          width: '300px',\n          boxShadow: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            style: {\n              textDecoration: task.completed ? 'line-through' : 'none'\n            },\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: task.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: [formatDate(task.deadline), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: task.completed ? 'green' : 'red',\n            children: task.completed ? 'Completed' : 'Pending'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            color: \"primary\",\n            onClick: () => handleOpenEditDialog(task),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            color: \"error\",\n            onClick: () => openDeleteDialog(task),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 15\n        }, this)]\n      }, task._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: editMode ? 'Edit Task' : 'Add New Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Title\",\n            name: \"title\",\n            value: currentTask.title,\n            onChange: handleInputChange,\n            fullWidth: true,\n            required: true,\n            margin: \"normal\",\n            error: !!errors.title,\n            helperText: errors.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Description\",\n            name: \"description\",\n            value: currentTask.description,\n            onChange: handleInputChange,\n            fullWidth: true,\n            margin: \"normal\",\n            error: !!errors.description,\n            helperText: errors.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Deadline\",\n            name: \"deadline\",\n            type: \"datetime-local\",\n            value: currentTask.deadline // Ensure this value is in YYYY-MM-DDTHH:mm format\n            ,\n            onChange: handleInputChange,\n            fullWidth: true,\n            required: true,\n            margin: \"normal\",\n            InputLabelProps: {\n              shrink: true // Ensures label is always above the input field\n            },\n            error: !!errors.deadline,\n            helperText: errors.deadline\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 11\n          }, this), editMode && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: currentTask.completed,\n              onChange: handleCompletedChange,\n              name: \"completed\",\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 19\n            }, this),\n            label: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCloseDialog,\n              color: \"secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              color: \"primary\",\n              children: editMode ? 'Update Task' : 'Add Task'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: deleteDialogOpen,\n      onClose: closeDeleteDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Confirm Deletion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Are you sure you want to delete this task?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: closeDeleteDialog,\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            if (taskToDelete) handleDelete(taskToDelete._id);\n          },\n          color: \"error\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"Rd+txjKXozEQs/ikOUg68ybjF34=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","axios","moment","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextField","Typography","Card","CardContent","CardActions","Checkbox","FormControlLabel","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","open","setOpen","editMode","setEditMode","isDeadlineChanged","setIsDeadlineChanged","currentTask","setCurrentTask","_id","title","description","deadline","completed","errors","setErrors","deleteDialogOpen","setDeleteDialogOpen","taskToDelete","setTaskToDelete","get","process","env","REACT_APP_API_URL","then","response","sortedTasks","data","sort","a","b","deadlineA","Date","deadlineB","catch","error","console","handleInputChange","e","name","value","target","handleCompletedChange","checked","validateFields","formValid","newErrors","length","trim","currentDate","deadlineDate","handleOpenDialog","handleOpenEditDialog","task","formattedDeadline","format","formatDate","dateString","handleCloseDialog","handleSubmit","preventDefault","taskDeadline","taskData","put","map","alert","post","handleDelete","taskId","delete","filter","openDeleteDialog","closeDeleteDialog","sx","padding","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","display","flexWrap","gap","marginTop","width","boxShadow","style","textDecoration","size","onClose","onSubmit","label","onChange","fullWidth","required","margin","helperText","type","InputLabelProps","shrink","control","_c","$RefreshReg$"],"sources":["C:/Users/DELL/TodoApp/client/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Typography, Card, CardContent, CardActions, Checkbox, FormControlLabel } from '@mui/material';\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [open, setOpen] = useState(false); // State for dialog visibility\r\n  const [editMode, setEditMode] = useState(false); // Flag to check if it's an edit mode\r\n  const [isDeadlineChanged, setIsDeadlineChanged] = useState(false);\r\n\r\n  const [currentTask, setCurrentTask] = useState({\r\n    _id: '',\r\n    title: '',\r\n    description: '',\r\n    deadline: '',\r\n    completed: false,\r\n  });\r\n\r\n  // Validation errors\r\n  const [errors, setErrors] = useState({\r\n    title: '',\r\n    description: '',\r\n    deadline: '',\r\n  });\r\n\r\n  // State for delete confirmation dialog\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [taskToDelete, setTaskToDelete] = useState(null);\r\n\r\n  // Fetch tasks on component mount\r\n  useEffect(() => {\r\n    axios.get(`${process.env.REACT_APP_API_URL}/tasks`)\r\n      .then((response) => {\r\n        // Sort tasks by deadline in ascending order (earliest first)\r\n        const sortedTasks = response.data.sort((a, b) => {\r\n          const deadlineA = new Date(a.deadline);\r\n          const deadlineB = new Date(b.deadline);\r\n          return deadlineA - deadlineB; // Sort by ascending deadline\r\n        });\r\n        setTasks(sortedTasks); // Store sorted tasks in the state\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching tasks:', error);\r\n      });\r\n  }, []);\r\n\r\n\r\n  // Handle form input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n  \r\n    // If the deadline field is being edited, set isDeadlineChanged to true\r\n    if (name === 'deadline') {\r\n      setIsDeadlineChanged(true);\r\n    }\r\n  \r\n    setCurrentTask({\r\n      ...currentTask,\r\n      [name]: value,\r\n    });\r\n  };\r\n  \r\n\r\n  // Handle Completed checkbox change (Only in Edit mode)\r\n  const handleCompletedChange = (e) => {\r\n    setCurrentTask({ ...currentTask, completed: e.target.checked });\r\n  };\r\n\r\n  // Validate the title, description, and deadline\r\n  const validateFields = () => {\r\n    const { title, description, deadline } = currentTask;\r\n    let formValid = true;\r\n    const newErrors = { title: '', description: '', deadline: '' };\r\n  \r\n    // Title validation\r\n    if (!title) {\r\n      newErrors.title = 'Title is required';\r\n      formValid = false;\r\n    } else if (title.length < 5) {\r\n      newErrors.title = 'Title must be at least 5 characters';\r\n      formValid = false;\r\n    } else if (title.length > 25) {\r\n      newErrors.title = 'Title must not exceed 25 characters';\r\n      formValid = false;\r\n    } else if (title.trim() !== title) {\r\n      newErrors.title = 'Title must not start or end with spaces';\r\n      formValid = false;\r\n    }\r\n  \r\n    // Deadline validation (should be in the future)\r\n    if (!deadline) {\r\n      newErrors.deadline = 'Deadline is required';\r\n      formValid = false;\r\n    } else {\r\n      const currentDate = new Date();\r\n      const deadlineDate = new Date(deadline);\r\n      if (deadlineDate <= currentDate) {\r\n        newErrors.deadline = 'Deadline must be in the future';\r\n        formValid = false;\r\n      }\r\n    }\r\n  \r\n    setErrors(newErrors);\r\n    return formValid;\r\n  };\r\n  \r\n  \r\n\r\n  // Handle opening the dialog for adding a new task\r\n  const handleOpenDialog = () => {\r\n    setOpen(true);\r\n    setEditMode(false); // Open in add mode\r\n    setCurrentTask({\r\n      _id: '',\r\n      title: '',\r\n      description: '',\r\n      deadline: '',\r\n      completed: false,\r\n    });\r\n    setErrors({ title: '', description: '', deadline: '' }); // Reset errors\r\n  };\r\n\r\n  // Handle opening the dialog for editing a task\r\n  const handleOpenEditDialog = (task) => {\r\n    setOpen(true);\r\n    setEditMode(true); // Open in edit mode\r\n  \r\n    // Format the deadline for 'datetime-local' input (YYYY-MM-DDTHH:mm)\r\n    const formattedDeadline = task.deadline\r\n      ? moment(task.deadline).format('YYYY-MM-DDTHH:mm') // Format to match 'datetime-local' format\r\n      : '';\r\n  \r\n    setCurrentTask({\r\n      _id: task._id,\r\n      title: task.title,\r\n      description: task.description,\r\n      deadline: formattedDeadline, // Set the formatted date for the 'datetime-local' input\r\n      completed: task.completed,\r\n    });\r\n  \r\n    setErrors({ title: '', description: '', deadline: '' }); // Reset errors\r\n  };\r\n  \r\n  \r\n  const formatDate = (dateString) => {\r\n    return moment(dateString).format('MM/DD/YYYY HH:mm'); // Custom format\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  // Handle closing the dialog\r\n  const handleCloseDialog = () => {\r\n    setOpen(false);\r\n    setErrors({ title: '', description: '', deadline: '' }); // Reset errors\r\n  };\r\n\r\n  // Handle adding or editing a task\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Only validate if the deadline has been changed\r\n    if (isDeadlineChanged) {\r\n      const currentDate = new Date();\r\n      const taskDeadline = new Date(currentTask.deadline);\r\n  \r\n      // If the deadline is in the past, show an error\r\n      if (taskDeadline < currentDate) {\r\n        setErrors({\r\n          ...errors,\r\n          deadline: 'Deadline must be in the future',\r\n        });\r\n        return; // Prevent form submission if the deadline is in the past\r\n      }\r\n    }\r\n  \r\n    // Proceed with saving the task\r\n    if (validateFields()) {\r\n      const taskData = {\r\n        title: currentTask.title,\r\n        description: currentTask.description,\r\n        deadline: currentTask.deadline,\r\n        completed: currentTask.completed, // Ensure the completed status is included\r\n      };\r\n  \r\n      if (editMode) {\r\n        // Update task\r\n        axios\r\n          .put(`${process.env.REACT_APP_API_URL}/tasks/${currentTask._id}`, taskData)\r\n          .then((response) => {\r\n            setTasks(\r\n              tasks.map((task) =>\r\n                task._id === currentTask._id ? { ...task, ...response.data } : task\r\n              )\r\n            );\r\n            handleCloseDialog();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error editing task:', error);\r\n            alert('Failed to edit task');\r\n          });\r\n      } else {\r\n        // Add new task\r\n        axios\r\n          .post(`${process.env.REACT_APP_API_URL}/tasks`, taskData)\r\n          .then((response) => {\r\n            setTasks([...tasks, response.data]);\r\n            handleCloseDialog();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error adding task:', error);\r\n            alert('Failed to add task');\r\n          });\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  // Handle task deletion\r\n  const handleDelete = (taskId) => {\r\n    axios\r\n      .delete(`${process.env.REACT_APP_API_URL}/tasks/${taskId}`)\r\n      .then(() => {\r\n        setTasks(tasks.filter((task) => task._id !== taskId));\r\n        setDeleteDialogOpen(false); // Close the delete confirmation dialog\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error deleting task:', error);\r\n        alert('Failed to delete task');\r\n        setDeleteDialogOpen(false); // Close the dialog in case of error\r\n      });\r\n  };\r\n\r\n  // Open delete confirmation dialog\r\n  const openDeleteDialog = (task) => {\r\n    setTaskToDelete(task);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  // Close delete confirmation dialog\r\n  const closeDeleteDialog = () => {\r\n    setDeleteDialogOpen(false);\r\n    setTaskToDelete(null); // Reset task to delete\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ padding: '20px' }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        To-Do List\r\n      </Typography>\r\n\r\n      {/* Button to open the \"Add Task\" dialog */}\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleOpenDialog}>\r\n        Add Task\r\n      </Button>\r\n\r\n      {/* Task Cards */}\r\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '20px', marginTop: '20px' }}>\r\n        {tasks.length === 0 ? (\r\n          <Typography>No tasks available</Typography>\r\n        ) : (\r\n          tasks.map((task) => (\r\n            <Card key={task._id} sx={{ width: '300px', boxShadow: 3 }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>\r\n                  {task.title}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {task.description}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {formatDate(task.deadline)} {/* Format the deadline to display */}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color={task.completed ? 'green' : 'red'}>\r\n                  {task.completed ? 'Completed' : 'Pending'}\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" color=\"primary\" onClick={() => handleOpenEditDialog(task)}>\r\n                  Edit\r\n                </Button>\r\n                <Button size=\"small\" color=\"error\" onClick={() => openDeleteDialog(task)}>\r\n                  Delete\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          ))\r\n        )}\r\n      </Box>\r\n\r\n      {/* Dialog for adding or editing a task */}\r\n      <Dialog open={open} onClose={handleCloseDialog}>\r\n        <DialogTitle>{editMode ? 'Edit Task' : 'Add New Task'}</DialogTitle>\r\n        <DialogContent>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              label=\"Title\"\r\n              name=\"title\"\r\n              value={currentTask.title}\r\n              onChange={handleInputChange}\r\n              fullWidth\r\n              required\r\n              margin=\"normal\"\r\n              error={!!errors.title}\r\n              helperText={errors.title}\r\n            />\r\n            <TextField\r\n              label=\"Description\"\r\n              name=\"description\"\r\n              value={currentTask.description}\r\n              onChange={handleInputChange}\r\n              fullWidth\r\n              margin=\"normal\"\r\n              error={!!errors.description}\r\n              helperText={errors.description}\r\n            />\r\n          <TextField\r\n            label=\"Deadline\"\r\n            name=\"deadline\"\r\n            type=\"datetime-local\"\r\n            value={currentTask.deadline} // Ensure this value is in YYYY-MM-DDTHH:mm format\r\n            onChange={handleInputChange}\r\n            fullWidth\r\n            required\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,  // Ensures label is always above the input field\r\n            }}\r\n            error={!!errors.deadline}\r\n            helperText={errors.deadline}\r\n          />\r\n\r\n\r\n\r\n            {/* Only show Completed checkbox in Edit mode */}\r\n            {editMode && (\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={currentTask.completed}\r\n                    onChange={handleCompletedChange}\r\n                    name=\"completed\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Completed\"\r\n              />\r\n            )}\r\n            <DialogActions>\r\n              <Button onClick={handleCloseDialog} color=\"secondary\">\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" color=\"primary\">\r\n                {editMode ? 'Update Task' : 'Add Task'}\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog open={deleteDialogOpen} onClose={closeDeleteDialog}>\r\n        <DialogTitle>Confirm Deletion</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>Are you sure you want to delete this task?</Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeDeleteDialog} color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (taskToDelete) handleDelete(taskToDelete._id);\r\n            }}\r\n            color=\"error\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}